{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","myStyle","setMyStyle","useState","color","backgroundColor","border","btnText","setBtnText","React","createElement","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","data-bs-parent","onClick","ToggleStyle","Alert","props","alert","concat","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","Link","to","title","aria-label","aria-current","aboutText","toggleMode","htmlFor","TextForm","text","setText","Fragment","heading","value","onChange","event","target","rows","handleUpClick","newText","showAlert","handleLowClick","handleClearClick","handleCopyClick","document","getElementById","select","navigator","clipboard","writeText","split","length","defaultProps","App","setMode","setAlert","message","setTimeout","Router","body","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.5f2a671d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function About() {\r\n  const [myStyle, setMyStyle] = useState({\r\n    color: \"black\",\r\n    backgroundColor: \"white\",\r\n    border:'2px solid white'\r\n  });\r\n  const[btnText,setBtnText] = useState(\"Enable Dark Mode\")\r\n\r\n  const ToggleStyle = ()=>{\r\n    if(myStyle.color === 'white'){\r\n        setMyStyle({\r\n            color:'black',\r\n            backgroundColor:'white',\r\n        })\r\n        setBtnText(\"Enable Dark Mode\")\r\n    }\r\n    else{\r\n        setMyStyle({\r\n            color:'white',\r\n            backgroundColor:'black',\r\n            border:'1px solid white'\r\n        })\r\n        setBtnText(\"Enable Light Mode\")\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"container\" style={myStyle}>\r\n      <h1 className=\"my-2\">About Us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              style={myStyle}\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container my-3\">\r\n        <button onClick={ToggleStyle} type=\"button\" className=\"btn btn-success\">\r\n          {btnText}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-secondary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label className=\"form-check-label \" htmlFor=\"flexSwitchCheckDefault\">\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"Uppercase was clicked \" + text)\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted To Uppercase\", \"success\");\r\n  };\r\n  const handleLowClick = () => {\r\n    // console.log(\"Uppercase was clicked \" + text)\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted To Lowercase\", \"success\");\r\n  };\r\n  const handleClearClick = () => {\r\n    // console.log(\"Uppercase was clicked \" + text)\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text is Cleared\", \"success\");\r\n  };\r\n  const handleCopyClick = () => {\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied to Clipboard\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n  const [text, setText] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#030d1b\" }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"myBox\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"gray\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"#030d1b\",\r\n            }}\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-info mx-1 my-1\" onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className=\"btn btn-warning mx-1 my-1\" onClick={handleLowClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button className=\"btn btn-danger mx-1 my-1\" onClick={handleClearClick}>\r\n          Clear Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1 my-1\" onClick={handleCopyClick}>\r\n          Copy Text\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#030d1b\" }}\r\n      >\r\n        <h2>Your Text Summary</h2>\r\n        <p>\r\n          {text.split(\" \").length} words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Enter Something in the textbox above to preview it here\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport { useState } from \"react\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#030d1b\";\n      showAlert(\"Dark Mode has been Enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode has been Enabled\", \"success\");\n    }\n  };\n  \n  return (\n    <>\n      <Router>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <div className=\"container my-3\">\n      <Alert alert={alert} />\n          <Routes>\n            <Route path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter the Text to Analyze it below\" mode={mode} />} />\n            <Route path=\"/about\" element={<About />} />\n          </Routes>\n          </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}